(page "index.html"
  (:require [clojure.pprint :as pp]
            [clojure.set :as set]
            [clojure.string :as string]
            [boggle-solver.trie :as trie]
            [boggle-solver.dict :refer [twl06-trie]]))

(defn word
  "Returns the word given by tokens, if it exists in dict. Otherwise returns
  nil."
  [dict tokens]
  (when (trie/in-trie? dict tokens)
    (apply str tokens)))

(defn partial-word?
  "True when the tokens form part of a word in dict."
  [dict tokens]
  (seq (trie/prefix-matches dict tokens)))

(defn neighbors
  "Returns a sequence of the points adjacent to point on the tray. Based on code
  by Christophe Grand:
  http://web.archive.org/web/20160623055257/http://clj-me.cgrand.net/2011/08/19/conways-game-of-life/"
  [[y x :as point]]
  (->> (for [dy [-1 0 1]
             dx (if (zero? dy) [-1 1] [-1 0 1])]
         [(+ dy y) (+ dx x)])
       ;; Ensure the neighboring points are on the tray.
       (filter (partial every? #(and (>= % 0) (< % 4))))))

(defn path->tokens
  "Converts a path to a sequence of tokens based on tray."
  [tray path]
  (map #(get-in tray %) path))

(defn children
  "Returns a sequence of paths starting from path, a vector of points, if any
  exist."
  [path]
  (->> (peek path)
       neighbors
       (filter (complement (set path)))
       (map (partial conj path))))

(defn make-node
  [path]
  {:path   path
   :kids   (children path)})

(defn search
  "Non-recursive backtracking search of the puzzle given by tray. Based on
  algorithm described on
  https://www.cis.upenn.edu/~matuszek/cit594-2012/Pages/backtracking.html"
  [dict tray found stack]
  (if-let [node (peek stack)]
    (let [{:keys [path kids]} node
          tokens              (path->tokens tray path)]
      (if-let [new-word (word dict tokens)]
        (recur dict
               tray
               (conj found {:word new-word
                            :path path})
               (into (pop stack)
                     (if (partial-word? dict tokens)
                       (map make-node kids))))
        (if (and (seq kids)
                 (partial-word? dict tokens))
          (recur dict
                 tray
                 found
                 (conj (pop stack)
                       (update node :kids next)
                       (make-node (first kids))))
          (recur dict tray found (pop stack)))))
    found))

(defn search-tray
  "Searches tray for words using dict and returns a set of words found."
  [dict tray]
  (->> (for [y (range 4) x (range 4)] [(make-node [[y x]])])
       (map (partial search dict tray #{}))
       (reduce set/union)))

(def blank-tray
  [[nil nil nil nil]
   [nil nil nil nil]
   [nil nil nil nil]
   [nil nil nil nil]])

(def input-tray (cell blank-tray))

(defn set-input!
  [point v]
  (swap! input-tray assoc-in point (string/lower-case v)))

(def valid-tokens
  (->> "abcdefghijklmnoprstuvwxyz"
       (map str)
       (cons "qu")
       set))

(defn token-valid?
  [t]
  (contains? valid-tokens t))

(def input-valid?
  (cell= (every? token-valid? (flatten input-tray))))

(def input-empty?
  (cell= (some identity (flatten input-tray))))

(def solution (cell nil))

(def hovering-path (cell nil))

(html
  (head
    (link :href "app.css" :rel "stylesheet" :type "text/css"))
  (body
    (h1 "Boggle Solver")
    (div :id "container"
      (if-tpl (cell= (not solution))
        (div :id "editor-container"
          (h3 "Enter your puzzle to begin.")
          (table :id "editor" :class "tray"
            (for [y (range 4)]
              (tr
                (for [x (range 4)]
                  (td :class (cell= {:good (token-valid? (get-in input-tray [y x]))
                                      :bad (not (token-valid? (get-in input-tray [y x])))})
                    (input
                      :value (cell= (get-in input-tray [y x]))
                      :keyup #(set-input! [y x] @%)
                      :blur #(set-input! [y x] @%)
                      :type "text"
                      :size 2))))))
          (div :id "editor-controls"
            (button :disabled (cell= (not input-valid?))
              :click #(reset! solution (search-tray twl06-trie @input-tray))
              "Solve")
            (button :disabled (cell= (not input-empty?))
              :click #(reset! input-tray blank-tray)
              "Clear"))
          (div :id "editor-errors" :toggle (cell= (not input-valid?))
            (p "One or more letters are invalid. Valid letters are a-z except q, and qu.")))

        (div :id "solution-container"
          (table :id "viewer" :class "tray"
            (for [y (range 4)]
              (tr
                (for [x (range 4)]
                  (td :css {:width "25%"}
                    :class (cell= {:good (contains? hovering-path [y x])})
                    (cell= (get-in input-tray [y x])))))))
          (p (text "~(count solution) words found. Here they are in order from longest to shortest. Hover over one to see it on the board."))
          (p (button :click #(reset! solution nil) "Reset"))
          (ul
            (for-tpl [s (cell= (reverse (sort-by (comp count :word) solution)))]
              (cell-let [{:keys [word path]} s]
                (li
                  :css {:cursor "pointer"}
                  :mouseenter #(reset! hovering-path (set @path))
                  :mouseleave #(reset! hovering-path nil)
                  (text "~{word} (~(count word))"))))))))))
